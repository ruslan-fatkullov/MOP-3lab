Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 1
main.ASM



      1	    0000			 .MODEL	SMALL
      2	    0000			 .STACK	200h
      3					 .386
      4					 INCLUDE macros.mac
1     5					 ; Макрос	вывода строки LINE
1     6					 PUTL	 MACRO LINE
1     7						 push ecx
1     8						 push eax
1     9						 push edx
1    10						 push si
1    11						 LEA   SI,   LINE
1    12						 XOR   CX,   CX
1    13						 XOR   DX,   DX
1    14						 XOR   AX,   AX
1    15						 CALL  PUTSS
1    16						 pop	 si
1    17						 pop edx
1    18						 pop eax
1    19						 pop ecx
1    20						 ENDM
1    21
1    22					 PUTLS	 MACRO LINE
1    23						 PUSH	 SI
1    24						 PUSH	 AX
1    25						 XOR   AX,   AX
1    26					     LEA   SI,	 LINE
1    27					     CALL  PUTSS
1    28						 POP	 AX
1    29						 POP	 SI
1    30					 ENDM
1    31
1    32					 INPUTMAS MACRO	STRING
1    33						 local V0, V1
1    34						 push dx
1    35						 push ax
1    36						 push esi
1    37
1    38						 xor dx, dx
1    39						 mov ah,0Ah
1    40					     lea dx,STRING
1    41					     int 21h
1    42						 lea esi, STRING
1    43
1    44						 V1:
1    45						 cmp byte ptr[esi+2], 0
1    46						 je V0
1    47						 inc esi
1    48						 jmp V1
1    49						 V0:
1    50						 mov byte ptr[esi+1], 0
1    51
1    52
1    53						 pop esi
1    54						 pop ax
1    55						 pop dx
1    56							 ENDM
1    57
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 2
main.ASM



1    58					 getElement MACRO
1    59							 ;;;
1    60						 push bx
1    61						 xor eax,eax
1    62						 mov al, byte ptr[edi]
1    63						 mov bl, 18
1    64						 mul bl
1    65						 pop bx
1    66						 ;;;
1    67							 ENDM
1    68					 ClearMas MACRO	STRING
1    69						 push esi
1    70						 lea esi, STRING
1    71						 call clearMassive
1    72						 pop esi
1    73							 ENDM
1    74					 CheckStr MACRO	STRING
1    75						 call checkOnDot
1    76						 cmp eax, 1
1    77						 jne inputError
1    78						 call checkOnSize
1    79						 cmp eax, -1
1    80						 je inputError
1    81						 call checkOnNumber
1    82						 cmp eax, -1
1    83						 je inputError
1    84							 ENDM
1    85
1    86
1    87
     88	    0000			 .DATA
     89	00000000				 Float	 struc
     90	00000000  01*(01*(2B))				 sign	 db	 1 dup('+')
     91	00000001  01*(0A*(7C))				 integer db	 10 dup('|')
     92	0000000B  01*(07*(3F))				 real	 db	 7 dup('?')
     93	00000012				 Float	 ends
     94
     95
     96	    0000  0A				 ten DB	10d
     97	    0001  00				 empty DB 0
     98	    0002  45 6E	74 65 72 20 66+		 requestForInputNumbers	DB "Enter from 3 to 20 numbers", 0
     99		  72 6F	6D 20 33 20 74+
    100		  6F 20	32 30 20 6E 75+
    101		  6D 62	65 72 73 00
    102	    001D  45 6E	74 65 72 20 69+		 requestForInputIndex DB "Enter	i, j, k", 0
    103		  2C 20	6A 2C 20 6B 00
    104	    002B  64 61	74 61 20 65 6E+		 errString DB "data entry error", 0
    105		  74 72	79 20 65 72 72+
    106		  6F 72	00
    107	    003C  77 61	6E 74 20 74 6F+		 questions	 db	 "want to enter	another	number?	[y|n]",	0
    108		  20 65	6E 74 65 72 20+
    109		  61 6E	6F 74 68 65 72+
    110		  20 6E	75 6D 62 65 72+
    111		  3F 20	5B 79 7C 6E 5D+
    112		  00
    113	    0060  6D 69	6E 69 6D 75 6D+		 minElem db	 "minimum element", 0
    114		  20 65	6C 65 6D 65 6E+
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 3
main.ASM



    115		  74 00
    116	    0070  72 65	73 75 6C 74 00		 res	 db	 "result", 0
    117	    0077  14				 testStr db 20
    118	    0078  15*(??)				 db 21 dup(?)
    119
    120	    008D  14*(01*(2B) 0A*(7C) +		 array	 Float	 20	 dup(<>)
    121		  07*(3F))
    122
    123
    124	    01F5  00 00	00			 index DB 0,0,0
    125	    01F8			 .CODE
    126	    0000			 START:
    127	    0000  B8 0000s			 mov ax,@data
    128	    0003  8E D8			     mov ds,ax
    129
    130	    0005  B9 0000			 mov cx, 0
    131
    132						 INPUTMAS testStr
1   133	    0008  52				 push dx
1   134	    0009  50				 push ax
1   135	    000A  66| 56			 push esi
1   136	    000C  33 D2				 xor dx, dx
1   137	    000E  B4 0A				 mov ah,0Ah
1   138	    0010  BA 0077r		     lea dx,testStr
1   139	    0013  CD 21			     int 21h
1   140	    0015  66| 8D 36 0077r		 lea esi, testStr
1   141	    001A				 ??0001:
1   142	    001A  67| 80 7E 02 00		 cmp byte ptr[esi+2], 0
1   143	    001F  74 06	90 90			 je ??0000
1   144	    0023  66| 46			 inc esi
1   145	    0025  EB F3				 jmp ??0001
1   146	    0027				 ??0000:
1   147	    0027  67| C6 46 01 00		 mov byte ptr[esi+1], 0
1   148	    002C  66| 5E			 pop esi
1   149	    002E  58				 pop ax
1   150	    002F  5A				 pop dx
    151	    0030  66| 8D 36 0077r		 lea esi, testStr
    152	    0035  E8 0000e			 call ATOI
    153
    154	    0038  66| 8D 3E 008Dr		 lea edi, array
    155
    156
    157						 PUTL requestForInputNumbers
1   158	    003D  66| 51			 push ecx
1   159	    003F  66| 50			 push eax
1   160	    0041  66| 52			 push edx
1   161	    0043  56				 push si
1   162	    0044  BE 0002r			 LEA   SI,   requestForInputNumbers
1   163	    0047  33 C9				 XOR   CX,   CX
1   164	    0049  33 D2				 XOR   DX,   DX
1   165	    004B  33 C0				 XOR   AX,   AX
1   166	    004D  E8 0000e			 CALL  PUTSS
1   167	    0050  5E				 pop	 si
1   168	    0051  66| 5A			 pop edx
1   169	    0053  66| 58			 pop eax
1   170	    0055  66| 59			 pop ecx
    171					 ;==============================================
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 4
main.ASM



    172					 ;цикл ввода чисел
    173	    0057			 InputCycle:
    174	    0057  3B C8				 cmp cx, ax
    175	    0059  0F 84	0098			 je endInputCycle
    176
    177						 ;==============================================
    178						 ;ввод числа в буфер
    179						 ;проверка на	корректность
    180						 ;запись из буфера в массив структур
    181						 INPUTMAS testStr
1   182	    005D  52				 push dx
1   183	    005E  50				 push ax
1   184	    005F  66| 56			 push esi
1   185	    0061  33 D2				 xor dx, dx
1   186	    0063  B4 0A				 mov ah,0Ah
1   187	    0065  BA 0077r		     lea dx,testStr
1   188	    0068  CD 21			     int 21h
1   189	    006A  66| 8D 36 0077r		 lea esi, testStr
1   190	    006F				 ??0003:
1   191	    006F  67| 80 7E 02 00		 cmp byte ptr[esi+2], 0
1   192	    0074  74 06	90 90			 je ??0002
1   193	    0078  66| 46			 inc esi
1   194	    007A  EB F3				 jmp ??0003
1   195	    007C				 ??0002:
1   196	    007C  67| C6 46 01 00		 mov byte ptr[esi+1], 0
1   197	    0081  66| 5E			 pop esi
1   198	    0083  58				 pop ax
1   199	    0084  5A				 pop dx
    200	    0085  66| 50			 push eax
    201						 CheckStr testStr ;меняется eax
1   202	    0087  E8 0000e			 call checkOnDot
1   203	    008A  66| 83 F8 01			 cmp eax, 1
1   204	    008E  75 4B	90 90			 jne inputError
1   205	    0092  E8 0000e			 call checkOnSize
1   206	    0095  66| 83 F8 FF			 cmp eax, -1
1   207	    0099  74 40	90 90			 je inputError
1   208	    009D  E8 0000e			 call checkOnNumber
1   209	    00A0  66| 83 F8 FF			 cmp eax, -1
1   210	    00A4  74 35	90 90			 je inputError
    211	    00A8  66| 58			 pop eax
    212	    00AA  E8 0000e			 call bufferToStruct
    213	    00AD  66| 83 C7 12			 add edi, 18
    214						 ClearMas testStr
1   215	    00B1  66| 56			 push esi
1   216	    00B3  66| 8D 36 0077r		 lea esi, testStr
1   217	    00B8  E8 0000e			 call clearMassive
1   218	    00BB  66| 5E			 pop esi
    219						 ;==============================================
    220
    221
    222
    223
    224						 PUTL empty
1   225	    00BD  66| 51			 push ecx
1   226	    00BF  66| 50			 push eax
1   227	    00C1  66| 52			 push edx
1   228	    00C3  56				 push si
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 5
main.ASM



1   229	    00C4  BE 0001r			 LEA   SI,   empty
1   230	    00C7  33 C9				 XOR   CX,   CX
1   231	    00C9  33 D2				 XOR   DX,   DX
1   232	    00CB  33 C0				 XOR   AX,   AX
1   233	    00CD  E8 0000e			 CALL  PUTSS
1   234	    00D0  5E				 pop	 si
1   235	    00D1  66| 5A			 pop edx
1   236	    00D3  66| 58			 pop eax
1   237	    00D5  66| 59			 pop ecx
    238	    00D7  41				 inc cx
    239	    00D8  E9 FF7C			 jmp InputCycle
    240	    00DB			 inputError:
    241						 PUTL errString
1   242	    00DB  66| 51			 push ecx
1   243	    00DD  66| 50			 push eax
1   244	    00DF  66| 52			 push edx
1   245	    00E1  56				 push si
1   246	    00E2  BE 002Br			 LEA   SI,   errString
1   247	    00E5  33 C9				 XOR   CX,   CX
1   248	    00E7  33 D2				 XOR   DX,   DX
1   249	    00E9  33 C0				 XOR   AX,   AX
1   250	    00EB  E8 0000e			 CALL  PUTSS
1   251	    00EE  5E				 pop	 si
1   252	    00EF  66| 5A			 pop edx
1   253	    00F1  66| 58			 pop eax
1   254	    00F3  66| 59			 pop ecx
    255	    00F5			 endInputCycle:
    256					 ;==============================================
    257
    258
    259					 ;==============================================
    260					 ;цикл ввода индексов
    261					 ;записывает индексы в стек
    262	    00F5  BF 01F5r			 lea di, index
    263
    264						 PUTL requestForInputIndex
1   265	    00F8  66| 51			 push ecx
1   266	    00FA  66| 50			 push eax
1   267	    00FC  66| 52			 push edx
1   268	    00FE  56				 push si
1   269	    00FF  BE 001Dr			 LEA   SI,   requestForInputIndex
1   270	    0102  33 C9				 XOR   CX,   CX
1   271	    0104  33 D2				 XOR   DX,   DX
1   272	    0106  33 C0				 XOR   AX,   AX
1   273	    0108  E8 0000e			 CALL  PUTSS
1   274	    010B  5E				 pop	 si
1   275	    010C  66| 5A			 pop edx
1   276	    010E  66| 58			 pop eax
1   277	    0110  66| 59			 pop ecx
    278	    0112  66| 33 C9			 xor ecx, ecx
    279	    0115  66| 8D 36 0077r		 lea esi, testStr
    280	    011A			 IndexCycle:
    281	    011A  66| 83 F9 03			 cmp ecx, 3
    282	    011E  74 5E	90 90			 je endIndexCycle
    283
    284						 INPUTMAS testStr
1   285	    0122  52				 push dx
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 6
main.ASM



1   286	    0123  50				 push ax
1   287	    0124  66| 56			 push esi
1   288	    0126  33 D2				 xor dx, dx
1   289	    0128  B4 0A				 mov ah,0Ah
1   290	    012A  BA 0077r		     lea dx,testStr
1   291	    012D  CD 21			     int 21h
1   292	    012F  66| 8D 36 0077r		 lea esi, testStr
1   293	    0134				 ??0005:
1   294	    0134  67| 80 7E 02 00		 cmp byte ptr[esi+2], 0
1   295	    0139  74 06	90 90			 je ??0004
1   296	    013D  66| 46			 inc esi
1   297	    013F  EB F3				 jmp ??0005
1   298	    0141				 ??0004:
1   299	    0141  67| C6 46 01 00		 mov byte ptr[esi+1], 0
1   300	    0146  66| 5E			 pop esi
1   301	    0148  58				 pop ax
1   302	    0149  5A				 pop dx
    303	    014A  E8 0000e			 call ATOI; меняет AX
    304						 PUTL empty
1   305	    014D  66| 51			 push ecx
1   306	    014F  66| 50			 push eax
1   307	    0151  66| 52			 push edx
1   308	    0153  56				 push si
1   309	    0154  BE 0001r			 LEA   SI,   empty
1   310	    0157  33 C9				 XOR   CX,   CX
1   311	    0159  33 D2				 XOR   DX,   DX
1   312	    015B  33 C0				 XOR   AX,   AX
1   313	    015D  E8 0000e			 CALL  PUTSS
1   314	    0160  5E				 pop	 si
1   315	    0161  66| 5A			 pop edx
1   316	    0163  66| 58			 pop eax
1   317	    0165  66| 59			 pop ecx
    318
    319	    0167  67| 88 07			 mov byte ptr[edi], al
    320	    016A  66| 83 C7 01			 add edi, 1
    321
    322						 ClearMas testStr
1   323	    016E  66| 56			 push esi
1   324	    0170  66| 8D 36 0077r		 lea esi, testStr
1   325	    0175  E8 0000e			 call clearMassive
1   326	    0178  66| 5E			 pop esi
    327	    017A  66| 41			 inc ecx
    328	    017C  EB 9C				 jmp IndexCycle
    329	    017E			 endIndexCycle:
    330					 ;==============================================
    331
    332
    333					 ;==============приведение================================
    334						 PUTL empty
1   335	    017E  66| 51			 push ecx
1   336	    0180  66| 50			 push eax
1   337	    0182  66| 52			 push edx
1   338	    0184  56				 push si
1   339	    0185  BE 0001r			 LEA   SI,   empty
1   340	    0188  33 C9				 XOR   CX,   CX
1   341	    018A  33 D2				 XOR   DX,   DX
1   342	    018C  33 C0				 XOR   AX,   AX
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 7
main.ASM



1   343	    018E  E8 0000e			 CALL  PUTSS
1   344	    0191  5E				 pop	 si
1   345	    0192  66| 5A			 pop edx
1   346	    0194  66| 58			 pop eax
1   347	    0196  66| 59			 pop ecx
    348	    0198  66| 33 C9			 xor ecx, ecx
    349	    019B  66| 8D 3E 008Dr		 lea edi, array
    350	    01A0				 startPriv:
    351	    01A0  66| 83 F9 14			 cmp ecx, 20
    352	    01A4  74 0D	90 90			 je endPriv
    353
    354	    01A8  E8 0000e			 call normalize
    355	    01AB  66| 83 C7 12			 add edi, 18
    356	    01AF  66| 41			 inc ecx
    357	    01B1  EB ED				 jmp startPriv
    358
    359	    01B3				 endPriv:
    360					 ;==============приведение================================
    361
    362					 ;==============поиск минимального====================================
    363					 ;минимальный в edi
    364						 ;;;lea	edi, array+18
    365	    01B3  66| 8D 3E 01F6r		 lea edi, index+1
    366						 getElement
1   367	    01B8  53				 push bx
1   368	    01B9  66| 33 C0			 xor eax,eax
1   369	    01BC  67| 8A 07			 mov al, byte ptr[edi]
1   370	    01BF  B3 12				 mov bl, 18
1   371	    01C1  F6 E3				 mul bl
1   372	    01C3  5B				 pop bx
    373	    01C4  66| 8D 3E 008Dr		 lea edi, array
    374	    01C9  66| 03 F8			 add edi, eax
    375						 ;;;
    376	    01CC  66| 57			 push edi
    377	    01CE  66| 8D 3E 01F7r		 lea edi, index+2
    378						 getElement
1   379	    01D3  53				 push bx
1   380	    01D4  66| 33 C0			 xor eax,eax
1   381	    01D7  67| 8A 07			 mov al, byte ptr[edi]
1   382	    01DA  B3 12				 mov bl, 18
1   383	    01DC  F6 E3				 mul bl
1   384	    01DE  5B				 pop bx
    385	    01DF  66| 8D 3E 008Dr		 lea edi, array
    386	    01E4  66| 03 F8			 add edi, eax
    387	    01E7  66| 8B F7			 mov esi, edi
    388	    01EA  66| 5F			 pop edi
    389
    390	    01EC  E8 0000e			 call changeOperand
    391	    01EF  E8 0000e			 call minimumOperand
    392						 PUTL minElem
1   393	    01F2  66| 51			 push ecx
1   394	    01F4  66| 50			 push eax
1   395	    01F6  66| 52			 push edx
1   396	    01F8  56				 push si
1   397	    01F9  BE 0060r			 LEA   SI,   minElem
1   398	    01FC  33 C9				 XOR   CX,   CX
1   399	    01FE  33 D2				 XOR   DX,   DX
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 8
main.ASM



1   400	    0200  33 C0				 XOR   AX,   AX
1   401	    0202  E8 0000e			 CALL  PUTSS
1   402	    0205  5E				 pop	 si
1   403	    0206  66| 5A			 pop edx
1   404	    0208  66| 58			 pop eax
1   405	    020A  66| 59			 pop ecx
    406	    020C  E8 0000e			 call outStruct
    407						 PUTL empty
1   408	    020F  66| 51			 push ecx
1   409	    0211  66| 50			 push eax
1   410	    0213  66| 52			 push edx
1   411	    0215  56				 push si
1   412	    0216  BE 0001r			 LEA   SI,   empty
1   413	    0219  33 C9				 XOR   CX,   CX
1   414	    021B  33 D2				 XOR   DX,   DX
1   415	    021D  33 C0				 XOR   AX,   AX
1   416	    021F  E8 0000e			 CALL  PUTSS
1   417	    0222  5E				 pop	 si
1   418	    0223  66| 5A			 pop edx
1   419	    0225  66| 58			 pop eax
1   420	    0227  66| 59			 pop ecx
    421						 ;;;
    422					 ;==============поиск минимального====================================
    423
    424
    425
    426					 ;==============замена местами при необходимости 1	и 2	    +
    427					 операндов================================
    428
    429	    0229  66| 8B F7			 mov esi, edi
    430						 ;;;
    431	    022C  66| 8D 3E 01F5r		 lea edi, index
    432						 getElement
1   433	    0231  53				 push bx
1   434	    0232  66| 33 C0			 xor eax,eax
1   435	    0235  67| 8A 07			 mov al, byte ptr[edi]
1   436	    0238  B3 12				 mov bl, 18
1   437	    023A  F6 E3				 mul bl
1   438	    023C  5B				 pop bx
    439	    023D  66| 8D 3E 008Dr		 lea edi, array
    440	    0242  66| 03 F8			 add edi, eax
    441						 ;;;
    442	    0245  E8 0000e			 call changeOperand
    443					 ;==============замена местами при необходимости 1	и 1	    +
    444					 операндов================================
    445
    446	    0248  66| 50			 push eax
    447
    448					 ;=====================сложение==================================
    449	    024A  67| 80 3F 2B			 cmp byte ptr[edi], '+'
    450	    024E  74 16	90 90			 je secondSIgn
    451	    0252  67| 80 3E 2B			 cmp byte ptr[esi], '+'
    452	    0256  74 08	90 90			 je SecondPlus
    453	    025A  E8 0000e			 call sumOperand
    454	    025D  EB 18	90			 jmp endSUM
    455	    0260				 SecondPlus:
    456	    0260  E8 0000e			 call subtraction
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 9
main.ASM



    457	    0263  EB 12	90			 jmp endSUM
    458	    0266				 secondSIgn:
    459	    0266  67| 80 3E 2B			 cmp byte ptr[esi], '+'
    460	    026A  74 08	90 90			 je sum
    461	    026E  E8 0000e			 call subtraction
    462	    0271  EB 04	90			 jmp endSUM
    463	    0274				 sum:
    464	    0274  E8 0000e			 call sumOperand
    465	    0277				 endSUM:
    466					 ;=====================сложение==================================
    467	    0277  66| 58			 pop eax
    468						 ;lea edi, array
    469	    0279  66| 83 F8 01			 cmp eax, 1
    470	    027D  74 1E	90 90			 je jkl
    471	    0281  66| 8D 3E 01F5r			 lea edi, index
    472							 getElement
1   473	    0286  53				 push bx
1   474	    0287  66| 33 C0			 xor eax,eax
1   475	    028A  67| 8A 07			 mov al, byte ptr[edi]
1   476	    028D  B3 12				 mov bl, 18
1   477	    028F  F6 E3				 mul bl
1   478	    0291  5B				 pop bx
    479	    0292  66| 8D 3E 008Dr			 lea edi, array
    480	    0297  66| 03 F8				 add edi, eax
    481	    029A  EB 1A	90				 jmp rtyy
    482	    029D				 jkl:
    483	    029D  66| 8D 3E 01F6r			 lea edi, index+1
    484							 getElement
1   485	    02A2  53				 push bx
1   486	    02A3  66| 33 C0			 xor eax,eax
1   487	    02A6  67| 8A 07			 mov al, byte ptr[edi]
1   488	    02A9  B3 12				 mov bl, 18
1   489	    02AB  F6 E3				 mul bl
1   490	    02AD  5B				 pop bx
    491	    02AE  66| 8D 3E 008Dr			 lea edi, array
    492	    02B3  66| 03 F8				 add edi, eax
    493	    02B6				 rtyy:
    494
    495
    496
    497
    498					 ;==========================
    499					 ;	 lea edi, array
    500					 ;	 call outStruct
    501					 ;	 PUTL empty
    502					 ;	 add edi, 18
    503					 ;	 call outStruct
    504					 ;	 PUTL empty
    505					 ;	 add edi, 18
    506						 PUTL res
1   507	    02B6  66| 51			 push ecx
1   508	    02B8  66| 50			 push eax
1   509	    02BA  66| 52			 push edx
1   510	    02BC  56				 push si
1   511	    02BD  BE 0070r			 LEA   SI,   res
1   512	    02C0  33 C9				 XOR   CX,   CX
1   513	    02C2  33 D2				 XOR   DX,   DX
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 10
main.ASM



1   514	    02C4  33 C0				 XOR   AX,   AX
1   515	    02C6  E8 0000e			 CALL  PUTSS
1   516	    02C9  5E				 pop	 si
1   517	    02CA  66| 5A			 pop edx
1   518	    02CC  66| 58			 pop eax
1   519	    02CE  66| 59			 pop ecx
    520	    02D0  E8 0000e			 call outStruct
    521					 ;==========================
    522
    523
    524
    525
    526	    02D3  B4 4C				 MOV	 AH, 4ch
    527	    02D5  B0 00			     MOV     AL, 0
    528	    02D7  CD 21			     INT     21h
    529						 EXTRN	 PUTSS:NEAR
    530						 EXTRN	 PUTC:NEAR
    531						 EXTRN	 BINtoDEC:NEAR
    532						 EXTRN	 OutMassive:NEAR
    533						 EXTRN	 GETCH:NEAR
    534						 EXTRN	 bufferToStruct:NEAR
    535						 EXTRN	 clearMassive:NEAR
    536						 EXTRN	 checkOnDot:NEAR
    537						 EXTRN	 checkOnSize:NEAR
    538						 EXTRN	 checkOnNumber:NEAR
    539						 EXTRN	 ATOI:NEAR
    540						 EXTRN	 MulFive:NEAR
    541						 EXTRN	 sumOperand:NEAR
    542						 EXTRN	 outStruct:NEAR
    543						 EXTRN	 normalize:NEAR
    544						 EXTRN	 subtraction:NEAR
    545						 EXTRN	 changeOperand:NEAR
    546						 EXTRN	 minimumOperand:NEAR
    547
    548					 END START
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??0000				  Near	 _TEXT:0027
??0001				  Near	 _TEXT:001A
??0002				  Near	 _TEXT:007C
??0003				  Near	 _TEXT:006F
??0004				  Near	 _TEXT:0141
??0005				  Near	 _TEXT:0134
??DATE				  Text	 "05/11/21"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "13:49:46"
??VERSION			  Number 0205
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 0D0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@MODEL				  Text	 2
@WORDSIZE			  Text	 2
ARRAY				  Struct DGROUP:008D FLOAT
ATOI				  Near	 _TEXT:---- Extern
BINTODEC			  Near	 _TEXT:---- Extern
BUFFERTOSTRUCT			  Near	 _TEXT:---- Extern
CHANGEOPERAND			  Near	 _TEXT:---- Extern
CHECKONDOT			  Near	 _TEXT:---- Extern
CHECKONNUMBER			  Near	 _TEXT:---- Extern
CHECKONSIZE			  Near	 _TEXT:---- Extern
CLEARMASSIVE			  Near	 _TEXT:---- Extern
EMPTY				  Byte	 DGROUP:0001
ENDINDEXCYCLE			  Near	 _TEXT:017E
ENDINPUTCYCLE			  Near	 _TEXT:00F5
ENDPRIV				  Near	 _TEXT:01B3
ENDSUM				  Near	 _TEXT:0277
ERRSTRING			  Byte	 DGROUP:002B
GETCH				  Near	 _TEXT:---- Extern
INDEX				  Byte	 DGROUP:01F5
INDEXCYCLE			  Near	 _TEXT:011A
INPUTCYCLE			  Near	 _TEXT:0057
INPUTERROR			  Near	 _TEXT:00DB
JKL				  Near	 _TEXT:029D
MINELEM				  Byte	 DGROUP:0060
MINIMUMOPERAND			  Near	 _TEXT:---- Extern
MULFIVE				  Near	 _TEXT:---- Extern
NORMALIZE			  Near	 _TEXT:---- Extern
OUTMASSIVE			  Near	 _TEXT:---- Extern
OUTSTRUCT			  Near	 _TEXT:---- Extern
PUTC				  Near	 _TEXT:---- Extern
PUTSS				  Near	 _TEXT:---- Extern
QUESTIONS			  Byte	 DGROUP:003C
REQUESTFORINPUTINDEX		  Byte	 DGROUP:001D
REQUESTFORINPUTNUMBERS		  Byte	 DGROUP:0002
RES				  Byte	 DGROUP:0070
RTYY				  Near	 _TEXT:02B6
SECONDPLUS			  Near	 _TEXT:0260
Turbo Assembler	 Version 2.51	     05/11/21 13:49:47	    Page 12
Symbol Table



SECONDSIGN			  Near	 _TEXT:0266
START				  Near	 _TEXT:0000
STARTPRIV			  Near	 _TEXT:01A0
SUBTRACTION			  Near	 _TEXT:---- Extern
SUM				  Near	 _TEXT:0274
SUMOPERAND			  Near	 _TEXT:---- Extern
TEN				  Byte	 DGROUP:0000
TESTSTR				  Byte	 DGROUP:0077

Macro Name

CHECKSTR
CLEARMAS
GETELEMENT
INPUTMAS
PUTL
PUTLS

Structure Name			  Type	Offset

FLOAT
 SIGN				  Byte	 0000
 INTEGER			  Byte	 0001
 REAL				  Byte	 000B

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  STACK				  16  0200 Para	  Stack	  STACK
  _DATA				  16  01F8 Word	  Public  DATA
_TEXT				  16  02D9 Word	  Public  CODE
